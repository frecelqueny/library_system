/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminInternalFrame;

import Authentication.Registration;
import config.connectDB;
import floatedPage.addUser;
import floatedPage.updateUser;
import java.awt.Color;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.TableModel;

/**
 *
 * @author markjay
 */
public class userForm extends javax.swing.JInternalFrame {

    private javax.swing.table.DefaultTableModel tableModel;

    /**
     * Creates new form userForm
     */
    public userForm() {
        initComponents();
        
        //remove border
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);

        // Initialize table model
        tableModel = (javax.swing.table.DefaultTableModel) user_tbl.getModel();
        
        // Add key listener to search field
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchUsers();
            }
        });

        // Load users on startup
        loadUsers();
    }

    public void loadUsers() {
        try {
            // Clear existing table data
            tableModel.setRowCount(0);
            
            connectDB dbc = new connectDB();
            ResultSet rs = dbc.getData("SELECT user_id, username, email, role, status FROM users ORDER BY username");
            
            while(rs.next()) {
                Object[] row = {
                    rs.getInt("user_id"),
                    rs.getString("username"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getString("status")
                };
                tableModel.addRow(row);
            }
            
            rs.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading users: " + ex.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void searchUsers() {
        String searchText = jTextField1.getText().toLowerCase().trim();
        
        // If search field is empty or contains only "search...", show all users
        if (searchText.isEmpty() || searchText.equals("search...")) {
            loadUsers();
            return;
        }

        try {
            // Clear existing table data
            tableModel.setRowCount(0);
            
            connectDB dbc = new connectDB();
            String query = "SELECT username, email, role, status FROM users " +
                          "WHERE LOWER(username) LIKE '"+searchText+"' OR LOWER(email) LIKE '"+searchText+"' OR " +
                          "LOWER(role) LIKE '"+searchText+"' OR LOWER(status) LIKE '"+searchText+"' " +
                          "ORDER BY username";
            
            String searchPattern = "%" + searchText + "%";
            ResultSet rs = dbc.getData(query);
            
            while(rs.next()) {
                Object[] row = {
                    rs.getString("username"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getString("status")
                };
                tableModel.addRow(row);
            }
            
            rs.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error searching users: " + ex.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        user = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        user_tbl = new javax.swing.JTable();
        add = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();

        user.setBackground(new java.awt.Color(204, 153, 255));
        user.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        user_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "username", "email", "role", "status"
            }
        ));
        jScrollPane1.setViewportView(user_tbl);

        jScrollPane2.setViewportView(jScrollPane1);

        user.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 610, 300));

        add.setText("ADD");
        add.setMaximumSize(new java.awt.Dimension(69, 23));
        add.setMinimumSize(new java.awt.Dimension(69, 23));
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        user.add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        edit.setText("EDIT");
        edit.setMaximumSize(new java.awt.Dimension(69, 23));
        edit.setMinimumSize(new java.awt.Dimension(69, 23));
        edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editMouseClicked(evt);
            }
        });
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        user.add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 370, -1, -1));

        delete.setText("DELETE");
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        user.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 370, -1, -1));

        jTextField1.setText("search...");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        user.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 190, -1));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("User");
        user.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, -1, -1));

        refreshButton.setText("Refresh");
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        user.add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 370, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
//        Registration reg = new Registration(true); // Indicate from dashboard
//        reg.setVisible(true);
//        this.dispose();
    }//GEN-LAST:event_addMouseClicked

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        JDialog dialog = new JDialog(); // Create a floating window
        addUser newPanel = new addUser();

        dialog.add(newPanel); // Add add_user to the dialog
        dialog.setSize(325, 500); // Set the size of the window
        dialog.setLocationRelativeTo(null); // Center the window
        dialog.setModal(true); // Prevent interactions with the main window until closed
        dialog.setVisible(true); // Show the floating add_user

    }//GEN-LAST:event_addActionPerformed

    private void editMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMouseClicked
        //        if (updateUserWindow != null && updateUserWindow.isShowing()) {
            //         updateUserWindow.thaoFront(); // Bring the existing window to front
            //            return;
            //        }

//        String userId = JOptionPane.showInputDialog(this, "Enter the User ID to edit:");
        //        if (userId != null && !userId.isEmpty()) {
            //            connectDB con = new connectDB();
            //            try {
                //                ResultSet rs = con.getData("SELECT user_id, first_name, last_name, username, email, password FROM users WHERE user_id = " + userId);
                //                if (rs.next()) {
                    //                    updateUserWindow = new UpdateUser();
                    //                    updateUserWindow.setUserData(
                        //                        rs.getString("user_id"),
                        //                        rs.getString("first_name"),
                        //                        rs.getString("last_name"),
                        //                        rs.getString("username"),
                        //                        rs.getString("email"),
                        //                        rs.getString("password")
                        //                    );
                    //                    updateUserWindow.setVisible(true);
                    //
                    //                    // Reset reference when window closes
                    //                    updateUserWindow.addWindowListener(new java.awt.event.WindowAdapter() {
                        //                        @Override
                        //                        public void windowClosed(java.awt.event.WindowEvent e) {
                            //                            updateUserWindow = null;
                            //                        }
                        //
                        //                        @Override
                        //                        public void windowClosing(java.awt.event.WindowEvent e) {
                            //                            updateUserWindow = null;
                            //                        }
                        //                    });
                //
                //                } else {
                //                    JOptionPane.showMessageDialog(this, "User ID not found!");
                //                }
            //            } catch (Exception e) {
            //                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            //            }
        //        }
    }//GEN-LAST:event_editMouseClicked

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        int rowIndex = user_tbl.getSelectedRow();

        if(rowIndex < 0){
            JOptionPane.showMessageDialog(null, " Please select an Item!!! ");
        }else{
            try{
                connectDB dbc = new connectDB();
                TableModel tbl = user_tbl.getModel();
                ResultSet rs = dbc.getData("SELECT * FROM users WHERE user_id = '" + tbl.getValueAt(rowIndex, 0) + "'");
                if(rs.next()){
                    JDialog dialog = new JDialog(); // Create a floating window
                    updateUser newPanel = new updateUser();

                    newPanel.id.setText(""+rs.getString("user_id"));
                    newPanel.fn.setText(""+rs.getString("first_name"));
                    newPanel.ln.setText(""+rs.getString("last_name"));
                    newPanel.un.setText(""+rs.getString("username"));
                    newPanel.em.setText(""+rs.getString("email"));
                    newPanel.rl.setSelectedItem(""+rs.getString("role"));
                    newPanel.status.setSelectedItem(""+rs.getString("status"));

                    Font arialFont = new Font("Arial", Font.PLAIN, 12);

                    newPanel.fn.setFont(arialFont);
                    newPanel.fn.setForeground(Color.BLACK);

                    newPanel.ln.setFont(arialFont);
                    newPanel.ln.setForeground(Color.BLACK);

                    newPanel.un.setFont(arialFont);
                    newPanel.un.setForeground(Color.BLACK);

                    newPanel.em.setFont(arialFont);
                    newPanel.em.setForeground(Color.BLACK);

                    dialog.add(newPanel); // Add add_user to the dialog
                    dialog.setSize(325, 500); // Set the size of the window
                    dialog.setLocationRelativeTo(null); // Center the window
                    dialog.setModal(true); // Prevent interactions with the main window until closed
                    dialog.setVisible(true); // Show the floating add_user

                }
            }catch(SQLException ex){
                System.out.println(""+ex);
            }
        }
    }//GEN-LAST:event_editActionPerformed

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
        int rowIndex = user_tbl.getSelectedRow();
        
        if(rowIndex < 0){
            JOptionPane.showMessageDialog(null, " Please select an Item!!! ");
            return;
        }
        
        TableModel tbl = user_tbl.getModel();
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete user ID " + tbl.getValueAt(rowIndex, 0) + "?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            connectDB con = new connectDB();
            
            int result = con.UpdateData("DELETE FROM users WHERE user_id = " + tbl.getValueAt(rowIndex, 0));
            
            if (result == 1) {
                JOptionPane.showMessageDialog(this, "User deleted successfully!");
                loadUsers();
            } else {
                JOptionPane.showMessageDialog(this, "User ID not found or deletion failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        // TODO add your handling code here:
        loadUsers();
    }//GEN-LAST:event_refreshButtonMouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        searchUsers();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JPanel user;
    private javax.swing.JTable user_tbl;
    // End of variables declaration//GEN-END:variables
}
